$include <prelude.sail>
$include <string.sail>

/*PUSH: 50+rw/rd*/
/*<p>Op/En: O</p> 
 <p><tt>50+rw/rd r16/r32/r64</tt></p> 
 <p>Note that <tt>50+rd r32</tt> is N.E. in 64-bit mode 
 and that <tt>50+rd r64</tt> is N.E. in 32-bit mode.</p> 
 
 <p>PUSH does not have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled with the execution in 
 this case.</p>*/
val x86_push_general_register : (int, int, int, int, int, int, int, int, int) -> int effect {eamem, escape, rreg, wmv, wreg}
function x86_push_general_register (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib, x86) =
let ctx = ("X86-PUSH-GENERAL-REGISTER") : string in
let operand_size = (the_range(1, 8, select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false, 0))) : int in
let rsp_var = (read_sptr(proc_mode, 0)) : int in
let (flg, new_rsp) = (add_to_sptr(proc_mode, rsp_var, negate(operand_size), 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let reg = (loghead(3, opcode)) : int in
let sailval = (rgfi_size(operand_size, reg_index(reg, rex_byte, 0), rex_byte, 0)) : int in
let badlength? = (check_instruction_length(start_rip, temp_rip, 0)) : option(int) in
if is_some(badlength?)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"))
else let (flg, x86) = (wme_size(proc_mode, operand_size, the_range(-140737488355328, 140737488355327, new_rsp), 2, sailval, alignment_checking_enabled_p(0), 0, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else let x86 = (write_sptr(proc_mode, new_rsp, 0)) : int in
let x86 = (write_iptr(proc_mode, temp_rip, 0)) : int in
0

/*PUSH: FF /6 r/m*/
/*<p>Op/En: M</p> 
 <p><tt>FF /6 r/m16/32/64</tt></p> 
 <p>Note that <tt>FF/6 r/m32</tt> is N.E. in 64-bit mode 
 and that <tt>FF/6 r/m64</tt> is N.E. in 32-bit mode.</p> 
 
 <p>PUSH does not have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled with the execution in 
 this case.</p> 
 
 <p>This opcode belongs to Group 5, and it has an opcode 
 extension ( ModR/m.reg = 6 ) .</p>*/
val x86_push_ev : (int, int, int, int, int, int, int, int, int) -> int effect {eamem, escape, rmem, rreg, wmv, wreg}
function x86_push_ev (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib, x86) =
let ctx = ("X86-PUSH-EV") : string in
let r_m = (the_range(0, 7, modr_m_get_r_m(modr_m))) : int in
let mod_var = (the_range(0, 3, modr_m_get_mod(modr_m))) : int in
let reg = (the_range(0, 7, modr_m_get_reg(modr_m))) : int in
let p2 = (prefixes_get_seg(prefixes)) : int in
let p4? = ((103) == (prefixes_get_adr(prefixes))) : bool in
let operand_size = (the_range(1, 8, select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false, 0))) : int in
let rsp_var = (read_sptr(proc_mode, 0)) : int in
let (flg, new_rsp) = (add_to_sptr(proc_mode, rsp_var, negate(operand_size), 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let seg_reg = (select_segment_register(proc_mode, p2, p4?, mod_var, r_m, sib, 0)) : int in
let (flg0, e, increment_rip_by, e_addr, x86) = (x86_operand_from_modr_m_and_sib_bytes(proc_mode, 0, operand_size, true, false, seg_reg, p4?, temp_rip, rex_byte, r_m, mod_var, sib, 0, 0)) : (option(string), int, int, int, int) in
let increment_rip_by = (the_range(0, 7, increment_rip_by)) : int in
if is_some(flg0)
then throw(Emsg("Model state error: :X86-OPERAND-FROM-MODR/M-AND-SIB-BYTES"))
else let (flg, temp_rip) = (add_to_iptr(proc_mode, temp_rip, increment_rip_by, 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INCREMENT-IP-ERROR', 'FLG']"))
else let badlength? = (check_instruction_length(start_rip, temp_rip, 0)) : option(int) in
if is_some(badlength?)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"))
else let (flg, x86) = (wme_size(proc_mode, operand_size, the_range(-140737488355328, 140737488355327, new_rsp), 2, e, alignment_checking_enabled_p(0), 0, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else let x86 = (write_sptr(proc_mode, new_rsp, 0)) : int in
let x86 = (write_iptr(proc_mode, temp_rip, 0)) : int in
0

/*PUSH: 6A/68 ib/iw/id*/
/*<p>Op/En: I</p> 
 <p><tt>6A ib</tt>: PUSH imm8</p> 
 <p><tt>68 iw</tt>: PUSH imm16</p> 
 <p><tt>68 id</tt>: PUSH imm32</p> 
 
 <p>From the description of the PUSH instruction ( Intel Manual, Vol. 2, 
 Section 4.2 ) :</p> 
 
 <p><i> If the source operand is an immediate of size less than the operand 
 size, a sign-extended value is pushed on the stack.</i></p> 
 
 <p>PUSH doesn ' t have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled the decoding with the 
 execution in this case.</p>*/
val x86_push_i : (int, int, int, int, int, int, int, int, int) -> int effect {eamem, escape, rmem, rreg, wmv, wreg}
function x86_push_i (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib, x86) =
let ctx = ("X86-PUSH-I") : string in
let byte_imm? = ((opcode) == (106)) : bool in
let imm_size = (the_range(1, 8, select_operand_size(proc_mode, byte_imm?, rex_byte, true, prefixes, false, false, false, 0))) : int in
let operand_size = (the_range(1, 8, select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false, 0))) : int in
let rsp_var = (read_sptr(proc_mode, 0)) : int in
let (flg, new_rsp) = (add_to_sptr(proc_mode, rsp_var, negate(operand_size), 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg0, imm, x86) = (rime_size(proc_mode, imm_size, temp_rip, 1, ":X", false, 0, struct {mem_ptr? = false})) : (option(string), int, int) in
let imm = (the_range(-2147483648, 2147483647, imm)) : int in
if is_some(flg0)
then throw(Emsg("Model state error: :IMM-RIME-SIZE-ERROR"))
else let (flg, temp_rip) = (add_to_iptr(proc_mode, temp_rip, imm_size, 0)) : (option(string), int) in
let temp_rip = (the_range(-140737488355328, 140737488355327, temp_rip)) : int in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':TEMP-RIP-NOT-CANONICAL', 'TEMP-RIP']"))
else let badlength? = (check_instruction_length(start_rip, temp_rip, 0)) : option(int) in
if is_some(badlength?)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"))
else let (flg1, x86) = (wme_size(proc_mode, operand_size, new_rsp, 2, loghead(ash(operand_size, 3), imm), alignment_checking_enabled_p(0), 0, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg1)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else let x86 = (write_sptr(proc_mode, new_rsp, 0)) : int in
let x86 = (write_iptr(proc_mode, temp_rip, 0)) : int in
0

/*PUSH Segment Register*/
/*<p>Note that PUSH CS/SS/DS/ES are invalid in 64-bit mode. Only PUSH FS/GS 
 are valid in 64-bit mode.</p> 
 
 <p><tt>0E</tt>: [PUSH CS]</p> 
 <p><tt>16</tt>: [PUSH SS]</p> 
 <p><tt>1E</tt>: [PUSH DS]</p> 
 <p><tt>06</tt>: [PUSH ES]</p> 
 <p><tt>0F A0</tt>: [PUSH FS]</p> 
 <p><tt>0F A8</tt>: [PUSH GS]</p> 
 
 <p>If the source operand is a segment register ( 16 bits ) and the operand 
 size is 64-bits, a zero-extended value is pushed on the stack; if the 
 operand size is 32-bits, either a zero-extended value is pushed on the stack 
 or the segment selector is written on the stack using a 16-bit move. For the 
 last case, all recent Core and Atom processors perform a 16-bit move, 
 leaving the upper portion of the stack location unmodified.</p> 
 
 <p>For now, our model handles the last case described above by doing a 
 16-bit move. This should be how all modern processor work. In the future, we 
 might parameterize the model on a flag that says how this case is handled 
 ( modern or legacy ) .</p> 
 
 <p>PUSH doesn ' t have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled with the execution in 
 this case.</p>*/
val x86_push_segment_register : (int, int, int, int, int, int, int, int, int) -> int effect {eamem, escape, rreg, wmv, wreg}
function x86_push_segment_register (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib, x86) =
let ctx = ("X86-PUSH-SEGMENT-REGISTER") : string in
let operand_size = (the_range(1, 8, select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false, 0))) : int in
let rsp_var = (read_sptr(proc_mode, 0)) : int in
let (flg, new_rsp) = (add_to_sptr(proc_mode, rsp_var, negate(operand_size), 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let sailval = (the_range(0, 65535, seg_visiblei((match opcode {
14 => 1,
22 => 2,
30 => 3,
6 => 0,
160 => 4,
_ => 5
}) : int, 0))) : int in
let (flg, x86) = (wme_size(proc_mode, if (operand_size) == (4)
then 2
else operand_size, the_range(-140737488355328, 140737488355327, new_rsp), 2, sailval, alignment_checking_enabled_p(0), 0, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else let x86 = (write_sptr(proc_mode, new_rsp, 0)) : int in
let x86 = (write_iptr(proc_mode, temp_rip, 0)) : int in
0

/*POP: 58+rw/rd*/
/*<p>Op/En: O</p> 
 <p><tt>58+rw/rd r16/r32/r64</tt></p> 
 <p>Note that <tt>58+rd r32</tt> is N.E. in the 64-bit mode 
 and that <tt>58+rd r64</tt> is N.E. in 32-bit mode.</p> 
 
 <p>POP does not have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled with the execution in 
 this case.</p>*/
val x86_pop_general_register : (int, int, int, int, int, int, int, int, int) -> int effect {escape, rmem, rreg, wreg}
function x86_pop_general_register (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib, x86) =
let ctx = ("X86-POP-GENERAL-REGISTER") : string in
let operand_size = (the_range(1, 8, select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false, 0))) : int in
let rsp_var = (read_sptr(proc_mode, 0)) : int in
let (flg, new_rsp) = (add_to_sptr(proc_mode, rsp_var, operand_size, 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg0, sailval, x86) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", alignment_checking_enabled_p(0), 0, struct {mem_ptr? = false})) : (option(string), int, int) in
if is_some(flg0)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else let reg = (binary_logand(opcode, 7)) : int in
let badlength? = (check_instruction_length(start_rip, temp_rip, 0)) : option(int) in
if is_some(badlength?)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"))
else let x86 = (write_sptr(proc_mode, new_rsp, 0)) : int in
let x86 = (write_rgfi_size(operand_size, reg_index(reg, rex_byte, 0), sailval, rex_byte, 0)) : int in
let x86 = (write_iptr(proc_mode, temp_rip, 0)) : int in
0

/*POP: 8F/0 r/m*/
/*<p>Op/En: M</p> 
 <p><tt>8F/0 r/m16/32/64</tt></p> 
 <p>Note that <tt>8F/0 r/m32</tt> is N.E. in 64-bit mode 
 and that <tt>8F/0 r/m64</tt> is N.E. in 32-bit mode.</p> 
 
 <p>POP does not have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled with the execution in 
 this case.</p> 
 
 <p>This opcode belongs to Group 1A, and it has an opcode 
 extension ( ModR/m.reg = 0 ) .</p>*/
val x86_pop_ev : (int, int, int, int, int, int, int, int, int) -> int effect {eamem, escape, rmem, rreg, wmv, wreg}
function x86_pop_ev (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib, x86) =
let ctx = ("X86-POP-EV") : string in
let r_m = (the_range(0, 7, modr_m_get_r_m(modr_m))) : int in
let mod_var = (the_range(0, 3, modr_m_get_mod(modr_m))) : int in
let reg = (the_range(0, 7, modr_m_get_reg(modr_m))) : int in
let p2 = (prefixes_get_seg(prefixes)) : int in
let p4? = ((103) == (prefixes_get_adr(prefixes))) : bool in
let operand_size = (the_range(1, 8, select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false, 0))) : int in
let rsp_var = (read_sptr(proc_mode, 0)) : int in
let (flg, new_rsp) = (add_to_sptr(proc_mode, rsp_var, operand_size, 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let check_alignment? = (alignment_checking_enabled_p(0)) : bool in
let (flg0, sailval, x86) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, 0, struct {mem_ptr? = false})) : (option(string), int, int) in
if is_some(flg0)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else let (flg1, addr, increment_rip_by, x86) = (if (mod_var) == (3)
then (None() : option(string), 0 : int, 0 : int, 0 : int)
else x86_effective_addr(proc_mode, p4?, temp_rip, rex_byte, r_m, mod_var, sib, 0, 0)) : (option(string), int, int, int) in
let addr = (the_range(-9223372036854775808, 9223372036854775807, addr)) : int in
let increment_rip_by = (the_range(0, 7, increment_rip_by)) : int in
if is_some(flg1)
then throw(Emsg("Model state error: :X86-EFFECTIVE-ADDR-ERROR"))
else let seg_reg = (select_segment_register(proc_mode, p2, p4?, mod_var, r_m, sib, 0)) : int in
let (flg, temp_rip) = (add_to_iptr(proc_mode, temp_rip, increment_rip_by, 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INCREMENT-IP-ERROR', 'FLG']"))
else let badlength? = (check_instruction_length(start_rip, temp_rip, 0)) : option(int) in
if is_some(badlength?)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"))
else let x86 = (write_sptr(proc_mode, new_rsp, 0)) : int in
let (flg3, x86) = (x86_operand_to_reg_mem(proc_mode, operand_size, check_alignment?, false, sailval, seg_reg, addr, rex_byte, r_m, mod_var, 0)) : (option(string), int) in
if is_some(flg3)
then throw(Emsg("Model state error: :X86-OPERAND-TO-REG/MEM"))
else let x86 = (write_iptr(proc_mode, temp_rip, 0)) : int in
0

val x86_pushf : (int, int, int, int, int, int, int, int, int) -> int effect {eamem, escape, rreg, wmv, wreg}
function x86_pushf (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib, x86) =
let ctx = ("X86-PUSHF") : string in
let operand_size = (the_range(1, 8, select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false, 0))) : int in
let rsp_var = (read_sptr(proc_mode, 0)) : int in
let (flg, new_rsp) = (add_to_sptr(proc_mode, rsp_var, negate(operand_size), 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let eflags = (the_range(0, 4294967295, r_rflags(0))) : int in
let eflags = (the_range(0, 4294967295, (match operand_size {
2 => binary_logand(65535, eflags),
_ => binary_logand(3997695, eflags)
}) : int)) : int in
let (flg, x86) = (wme_size(proc_mode, operand_size, the_range(-140737488355328, 140737488355327, new_rsp), 2, eflags, alignment_checking_enabled_p(0), 0, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else let x86 = (write_sptr(proc_mode, new_rsp, 0)) : int in
let x86 = (write_iptr(proc_mode, temp_rip, 0)) : int in
0

val x86_popf : (int, int, int, int, int, int, int, int, int) -> int effect {escape, rmem, rreg, wreg}
function x86_popf (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib, x86) =
let ctx = ("X86-POPF") : string in
let operand_size = (the_range(1, 8, select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false, 0))) : int in
let rsp_var = (read_sptr(proc_mode, 0)) : int in
let (flg, new_rsp) = (add_to_sptr(proc_mode, rsp_var, operand_size, 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg0, sailval, x86) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", alignment_checking_enabled_p(0), 0, struct {mem_ptr? = false})) : (option(string), int, int) in
if is_some(flg0)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else let sailval = (the_range(0, 4294967295, binary_logior(2, the_range(0, 4294967295, binary_logand(4161495, sailval))))) : int in
let x86 = (write_sptr(proc_mode, new_rsp, 0)) : int in
let x86 = ((match operand_size {
2 => write_rflags(sailval, 0),
_ => let rf = (the_range(0, 1, let rflags_var = (the_range(0, 4294967295, r_rflags(0))) : int in
rflagsbits_get_rf(rflags_var))) : int in
let vm = (the_range(0, 1, let rflags_var = (the_range(0, 4294967295, r_rflags(0))) : int in
rflagsbits_get_vm(rflags_var))) : int in
let x86 = (write_rflags(sailval, 0)) : int in
let x86 = (let rflags_var = (the_range(0, 4294967295, r_rflags(0))) : int in
let new_rflags = (the_range(0, 4294967295, set_rflagsbits_get_rf(rf, rflags_var))) : int in
write_rflags(new_rflags, 0)) : int in
let x86 = (let rflags_var = (the_range(0, 4294967295, r_rflags(0))) : int in
let new_rflags = (the_range(0, 4294967295, set_rflagsbits_get_vm(vm, rflags_var))) : int in
write_rflags(new_rflags, 0)) : int in
let x86 = (let rflags_var = (the_range(0, 4294967295, r_rflags(0))) : int in
let new_rflags = (the_range(0, 4294967295, set_rflagsbits_get_vip(0, rflags_var))) : int in
write_rflags(new_rflags, 0)) : int in
let x86 = (let rflags_var = (the_range(0, 4294967295, r_rflags(0))) : int in
let new_rflags = (the_range(0, 4294967295, set_rflagsbits_get_vif(0, rflags_var))) : int in
write_rflags(new_rflags, 0)) : int in
0
}) : int) : int in
let x86 = (write_iptr(proc_mode, temp_rip, 0)) : int in
0

/*PUSHA/PUSHAD: 60*/
/*<p> 
 In 64-bit mode, this instruction is invalid; it throws a #UD exception. 
 </p> 
 <p> 
 Note that the stack pointer is read twice: 
 via @ ( tsee read-*sp ) and via @ ( tsee rgfi-size ) . 
 The former is used as the address to write into the stack, 
 while the latter is used as ( part of ) the data to write into the stack. 
 In principle, the sizes of these two stack pointers may differ: 
 the former ' s size is determined solely by CS.D, 
 while the latter ' s size is also influenced 
 by the operand size override prefix. 
 It seems odd that the two sizes would differ, though. 
 </p> 
 <p> 
 We use some simple and repetitive code to write the registers into the stack. 
 It may be possible to optimize it by pushing all the registers in one shot. 
 </p>*/
val x86_pusha : (int, int, int, int, int, int, int, int, int) -> int effect {eamem, escape, rreg, wmv, wreg}
function x86_pusha (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib, x86) =
let ctx = ("X86-PUSHA") : string in
let operand_size = (the_range(2, 4, select_operand_size(proc_mode, false, 0, false, prefixes, false, false, false, 0))) : int in
let rsp_var = (read_sptr(proc_mode, 0)) : int in
let eax_ax = (rgfi_size(operand_size, 0, 0, 0)) : int in
let ecx_cx = (rgfi_size(operand_size, 1, 0, 0)) : int in
let edx_dx = (rgfi_size(operand_size, 2, 0, 0)) : int in
let ebx_bx = (rgfi_size(operand_size, 3, 0, 0)) : int in
let esp_sp = (rgfi_size(operand_size, 4, 0, 0)) : int in
let ebp_bp = (rgfi_size(operand_size, 5, 0, 0)) : int in
let esi_si = (rgfi_size(operand_size, 6, 0, 0)) : int in
let edi_di = (rgfi_size(operand_size, 7, 0, 0)) : int in
let check_alignment? = (alignment_checking_enabled_p(0)) : bool in
let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, negate(operand_size), 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, x86) = (wme_size(proc_mode, operand_size, rsp_var, 2, eax_ax, check_alignment?, 0, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else let check_alignment? = (false) : bool in
let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, negate(operand_size), 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, x86) = (wme_size(proc_mode, operand_size, rsp_var, 2, ecx_cx, check_alignment?, 0, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, negate(operand_size), 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, x86) = (wme_size(proc_mode, operand_size, rsp_var, 2, edx_dx, check_alignment?, 0, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, negate(operand_size), 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, x86) = (wme_size(proc_mode, operand_size, rsp_var, 2, ebx_bx, check_alignment?, 0, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, negate(operand_size), 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, x86) = (wme_size(proc_mode, operand_size, rsp_var, 2, esp_sp, check_alignment?, 0, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, negate(operand_size), 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, x86) = (wme_size(proc_mode, operand_size, rsp_var, 2, ebp_bp, check_alignment?, 0, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, negate(operand_size), 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, x86) = (wme_size(proc_mode, operand_size, rsp_var, 2, esi_si, check_alignment?, 0, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, negate(operand_size), 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, x86) = (wme_size(proc_mode, operand_size, rsp_var, 2, edi_di, check_alignment?, 0, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let x86 = (write_sptr(proc_mode, rsp_var, 0)) : int in
let x86 = (write_iptr(proc_mode, temp_rip, 0)) : int in
0

/*POPA/POPD: 61*/
/*<p> 
 In 64-bit mode, this instruction is invalid; it throws a #UD exception. 
 </p> 
 <p> 
 We use some simple and repetitive code to read the registers from the stack. 
 It may be possible to optimize it by popping all the registers in one shot. 
 </p>*/
val x86_popa : (int, int, int, int, int, int, int, int, int) -> int effect {escape, rmem, rreg, wreg}
function x86_popa (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib, x86) =
let ctx = ("X86-POPA") : string in
let operand_size = (the_range(2, 4, select_operand_size(proc_mode, false, 0, false, prefixes, false, false, false, 0))) : int in
let rsp_var = (read_sptr(proc_mode, 0)) : int in
let check_alignment? = (alignment_checking_enabled_p(0)) : bool in
let (flg, edi_di, x86) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, 0, struct {mem_ptr? = false})) : (option(string), int, int) in
if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, operand_size, 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let check_alignment? = (false) : bool in
let (flg, esi_si, x86) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, 0, struct {mem_ptr? = false})) : (option(string), int, int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, operand_size, 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, ebp_bp, x86) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, 0, struct {mem_ptr? = false})) : (option(string), int, int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, operand_size, 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, operand_size, 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, ebx_bx, x86) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, 0, struct {mem_ptr? = false})) : (option(string), int, int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, operand_size, 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, edx_dx, x86) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, 0, struct {mem_ptr? = false})) : (option(string), int, int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, operand_size, 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, ecx_cx, x86) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, 0, struct {mem_ptr? = false})) : (option(string), int, int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, operand_size, 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, eax_ax, x86) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, 0, struct {mem_ptr? = false})) : (option(string), int, int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, operand_size, 0)) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let x86 = (write_rgfi_size(operand_size, 7, edi_di, 0, 0)) : int in
let x86 = (write_rgfi_size(operand_size, 6, esi_si, 0, 0)) : int in
let x86 = (write_rgfi_size(operand_size, 5, ebp_bp, 0, 0)) : int in
let x86 = (write_rgfi_size(operand_size, 3, ebx_bx, 0, 0)) : int in
let x86 = (write_rgfi_size(operand_size, 2, edx_dx, 0, 0)) : int in
let x86 = (write_rgfi_size(operand_size, 1, ecx_cx, 0, 0)) : int in
let x86 = (write_rgfi_size(operand_size, 0, eax_ax, 0, 0)) : int in
let x86 = (write_sptr(proc_mode, rsp_var, 0)) : int in
let x86 = (write_iptr(proc_mode, temp_rip, 0)) : int in
0

